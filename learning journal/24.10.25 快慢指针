给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使得出现次数超过两次的元素只出现两次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

输入：nums = [1,1,1,2,2,3]
输出：5, nums = [1,1,2,2,3]
解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3。 不需要考虑数组中超出新长度后面的元素。
示例 2：

输入：nums = [0,0,1,1,1,1,2,3,3]
输出：7, nums = [0,0,1,1,2,3,3]
解释：函数应返回新长度 length = 7, 并且原数组的前七个元素被修改为 0, 0, 1, 1, 2, 3, 3。不需要考虑数组中超出新长度后面的元素

class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        int n = nums.size();
        if (n <= 2) {
            return n;
        }
        int slow = 2, fast = 2; （前两个必定不修改）
        while (fast < n) { 
            if (nums[slow - 2] != nums[fast]) { （nums[fast] 表示待检查的元素，nums[slow−2] 为上一个应该被保留的元素所移动到的指定位置。）
                nums[slow] = nums[fast]; （nums[slow−2] 是否和 nums[fast] 相同。当且仅当 nums[slow−2] ！= nums[fast] 时，当前待检查元素 nums[fast] 应该被保留）
                ++slow;
            }
            ++fast;
        }
        return slow;
    }
};

#计数法
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if (nums.empty()) return 0;

        int n = nums.size();
        int k = 1;
        int count = 1; // 

        for (int i = 1; i < n; ++i) {
            if (nums[i] == nums[i - 1]) {
                count++; 
            } else {
                count = 1; 
            }

            if (count <= 2) {
                nums[k++] = nums[i]; 
            }
        }

        return k; // 返回新数组的长度
    }
};
