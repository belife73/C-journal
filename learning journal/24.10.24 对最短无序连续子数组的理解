给你一个整数数组 nums ，你需要找出一个 连续子数组 ，如果对这个子数组进行升序排序，那么整个数组都会变为升序排序。
请你找出符合题意的 最短 子数组，并输出它的长度。

class Solution {
public:
    int findUnsortedSubarray(vector<int>& nums) {
        int n = nums.size();

        int maxn = INT_MIN, right = -1;
        int minn = INT_MAX, left = -1;

        for (int i = 0; i < n; i++)
        {
            if (maxn > nums[i]) right = i;（从左往右寻找在最右边的单调递增子数组）
            else maxn = nums[i];

            if (minn < nums[n - i - 1]) left = n - i - 1;（（从右往左寻找在最左边的单调递减子数组））
            else minn = nums[n - i - 1];
        }

        return right == -1 ? 0 : right - left + 1;
    }
};
我们可以假设把这个数组分成三段，左段和右段是标准的升序数组，中段数组虽是无序的，但满足最小值大于左段的最大值，最大值小于右段的最小值。
那么我们目标就很明确了，找中段的左右边界，我们分别定义为begin 和 end;
分两头开始遍历:

从左到右维护一个最大值max,在进入右段之前，那么遍历到的nums[i]都是小于max的，我们要求的end就是遍历中最后一个小于max元素的位置；
同理，从右到左维护一个最小值min，在进入左段之前，那么遍历到的nums[i]也都是大于min的，要求的begin也就是最后一个大于min元素的位置。
